<?php

/**
 * @file
 * Contains readmehelp.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements the ReadmeHelpMarkdownConverter service.
 *
 * If the module name is passed then README* file in the modules root
 * directory will be rendered. If the file path passed is a valid
 * directory within Drupal installation then the first README* file found on
 * the path will be rendered. If the file path is an absolute path to existing
 * Drupal site's file then this file will be rendered disregarding of the file
 * name or extension.
 *
 * @param string $module_name
 *   (optional) The module to look for the files.
 * @param string $file_path
 *   (optional) The alternative file path.
 *
 * @return \Drupal\readmehelp\ReadmeHelpMarkdownConverter|string
 *   The markdown converter service or markup generated for a file.
 */
function readmehelp_converter_service($module_name = NULL, $file_path = NULL) {
  $converter = \Drupal::service('readmehelp.markdown_converter');
  if ($module_name) {
    return $converter->convertMarkdownFile($module_name, $file_path);
  }

  return $converter;
}

/**
 * Implements hook_readmehelp().
 *
 * A hook allowing YOUR_MODULE, having a dependency on the readmehelp module,
 * to override default behaviour of the module and call a regular
 * YOUR_MODULE_help() hook implementation instead of automatically rendering
 * README file in YOUR_MODULE root directory.
 */
function your_module_readmehelp($route_name, RouteMatchInterface $route_match) {
}

/**
 * Implements hook_help().
 *
 * An example how readmehelp.markdown_converter service could be used to alter
 * the markup generated by the service.
 */
function your_module_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.YOUR_MODULE':
      // Optionally, any path to a directory or to a file could be passed. Also,
      // you may call the function without arguments to get a
      // readmehelp.markdown_converter service object. That way more complex
      // data compiling could be done, such as converting raw markdown strings,
      // extracting PHP snippets from the source files and so on.
      $markup = readmehelp_converter_service('YOUR_MODULE', 'PATH/TO/YOUR_FILE');
      $string = 'Please, read the followng:';
      $parts = explode($string, $markup);
      if (isset($parts[1])) {
        $insertion = "<h4>$string</h4><p>This is the insertion you need carefully to read.</p>";
        $markup = implode("", [$parts[0], $insertion, $parts[1]]);
      }

      return [
        '#attached' => [
          'library' => ['readmehelp/page'],
        ],
        '#markup' => $markup,
      ];

    default:
      return NULL;
  }
}
